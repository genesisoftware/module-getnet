<?php
/**
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to https://www.fcamara.com.br/ for more information.
 *
 * @category  FCamara
 * @package   FCamara_Getnet
 * @copyright Copyright (c) 2020 Getnet
 * @Agency    FCamara Formação e Consultoria, Inc. (http://www.fcamara.com.br)
 * @author    Jonatan Santos <jonatan.santos@fcamara.com.br>
 */

namespace FCamara\Getnet\Model;

/**
 * Interface class to showcase the public API methods for Getnet Payment
*/
interface ClientInterface
{
    const CREDIT_CARD_BRADS = [
        "MC" => "Mastercard",
        "VI" => "Visa",
        "AM" => "Amex",
        "ELO" => "Elo",
        "HC" => "Hipercard",
        "Mastercard" => "Mastercard",
        "Visa" => "Visa",
        "Amex" => "Amex",
        "Elo" => "Elo",
        "Hipercard" => "Hipercard"
    ];

    const CREDIT_CARD_MONTH_EXP = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];

    /**
     * Setter for Getnet ClientId
     * @param string $clientId
    */
    public function setClientId($clientId);

    /**
     * Setter for Getnet ClientSecret
     * @param string $clientSecret
     */
    public function setClientSecret($clientSecret);

    /**
     * Setter for Getnet service endpoint
     * @param string $endpoint
     */
    public function setEndpoint($endpoint);

    /**
     * Endpoint responsible for generating the access token used in other requests,
     * for this we use HTTP Basic Authentication.
     * @return array|false
     */
    public function authentication();

    /**
     * Endpoint responsible tokenize credit card number.
     * To make transactions securely, the card number must be tokenized.
     *
     * array['card_number'](String) - [13..19] characters - Credit card number - Required
     * array['customer_id'](string) - <= 100 characters - Customer's identifier - Optional
     *
     * @param array $requestParameters (See above)
     * @return array
     */
    public function tokenCard($requestParameters = []);

    /**
     * Endpoint responsible validate credit card information.
     * The purpose of the credit card verification transaction is to verify that the credit card entered
     * by the cardholder is a valid card. A valid credit card is a card that is not canceled,
     * blocked or restricted. Card verification is only available for Mastercard and Visa brands.
     *
     * array['number_token'](String) - 128 characters - Tokenized card number generated by tokenCard method - Required
     * array['expiration_month'](String) - 2 characters - Two-digit card expiration month. - Required
     * array['expiration_year'](String) - 2 characters - Two-digit card expiration year. - Required
     * array['cardholder_name'](string) - <= 26 characters - Customer Name printed on card. - Optional
     * array['security_code'](string) - <= [3..4] characters - Security code. CVV ou CVC. - Optional
     * array['brand'](string) - <= 50 characters - Credit card brand - Optional
     *      (Valid Values: "Mastercard","Visa","Amex","Elo","Hipercard")
     *
     * @param array $requestParameters (See above)
     * @return array
     */
    public function verifyCard($requestParameters = []);

    /**
     * Endpoint responsible tokenize credit card number.
     * To make transactions securely, the card number must be tokenized.
     *
     * array['card_number'](String) - [13..19] characters - Credit card number - Required
     * array['customer_id'](string) - <= 100 characters - Customer's identifier - Optional
     *
     * @param array $requestParameters (See above)
     * @return array
     */
    public function changePaymentAmount($requestParameters = []);

    /**
     * This endpoint will receive credit card payment details.
     * For the delayed, authenticated, and pre_authorization fields, only one of them may have a value of true,
     * thus indicating only one credit service to be processed.
     *
     * array['seller_id'](string <uuidv4>) - 36 characters - E-commerce identification code - Required
     * array['amount'](integer) - undefined - Purchase amount in cents. - Required
     * array['currency'](string) - 3 character - Currency identifier - Optional
     * array['order'](array) Purchase Identification Data Set - Required
     *          array['order_id'](string) - <= 36 character - Purchase ID used by e-commerce - Required
     *          array['sales_tax'](number) - Tax Amount - Optional
     *          array['product_type'](string) - Product Type Identifier from Options ["cash_carry","digital_content","digital_goods","digital_physical","gift_card","physical_goods","renew_subs","shareware","service"] - Optional
     * array['customer'](array) Customer Data Set - Required
     *          array['customer_id'](string) - <= 100 character - Customer's identifier - Required
     *          array['first_name'](string) - <= 40 character - Customer's first name - Required
     *          array['last_name'](string) - <= 80 character - Customer's last name - Required
     *          array['name'](string) - <= 100 character - Customer's name - Required
     *          array['email'](string) - undefined- Customer's e-mail - Required
     *          array['document_type'](string) - undefined - Customer's document type ("CPF", "CNPJ") - Required
     *          array['document_number'](string) - <= [11..15] character - Customer's document number - Required
     *          array['phone_number'](string) - <= 15 character - Customer's phone number - Required
     *          array['billing_address'](array) - Customer's billing address - Required
     *                          array['street'](string) - <= 60 character - Customer's street - Required
     *                          array['number'](string) - <= 10 character - Customer's address number - Required
     *                          array['complement'](string) - <= 60 character - Customer's address complement - Required
     *                          array['district'](string) - <= 40 character - Customer's address district - Required
     *                          array['city'](string) - <= 40 character - Customer's address city - Required
     *                          array['state'](string) - <= 20 character - Customer's address state- Required
     *                          array['country'](string) - <= 20 character - Customer's address country- Required
     *                          array['postal_code'](string) - <= 8 character - Customer's address postal code - Required
     * array['device'](array) Data Set from the device used by the customer - Optional
     *          array['ip_address'](string <IPv4>) - <= 100 character - Customer's identifier - Optional|Required (anti-fraud)
     *          array['device_id'](string) - undefined - Customer's first name - Optional|Required (anti-fraud)
     * array['shippings'](array) Customer shipping Data Set - Optional
     *          array['first_name'](string) - <= 40 character - Customer's first name - Required
     *          array['name'](string) - <= 100 character - Customer's name - Required
     *          array['email'](string) - undefined - Customer's e-mail - Required
     *          array['phone_number'](string) - <= 15 character - Customer's phone number - Required
     *          array['shipping_amount'](number) - Shipping amount - Required
     *          array['address'](array) - Shipping address - Required
     *                          array['street'](string) - <= 60 character - Customer's street - Required
     *                          array['number'](string) - <= 10 character - Customer's address number - Required
     *                          array['complement'](string) - <= 60 character - Customer's address complement - Required
     *                          array['district'](string) - <= 40 character - Customer's address district - Required
     *                          array['city'](string) - <= 40 character - Customer's address city - Required
     *                          array['state'](string) - <= 20 character - Customer's address state- Required
     *                          array['country'](string) - <= 20 character - Customer's address country- Required
     *                          array['postal_code'](string) - <= 8 character - Customer's address postal code - Required
     * array['credit'](array) Credit card transaction Data Set - Required
     *          array['delayed'](boolean) - Identifies if the credit will be made with late confirmation. - Required
     *          array['authenticated'](boolean) - Indicates whether the transaction should have the issuer authentication process, if authenticated = true, the bearer should be forwarded to the issuer site for authentication with the issuer. - Optional
     *          array['pre_authorization'](boolean) - Indicative if the transaction is a pre credit authorization. - Optional
     *          array['save_card_data'](boolean) - Identifies whether the card should be saved for future purchases. - Required
     *          array['transaction_type'](string) - <= Transaction Type. Full payment in cash, installment without interest, installment with interest. ["FULL","INSTALL_NO_INTEREST","INSTALL_WITH_INTEREST"] - Required
     *          array['number_installments'](number) - undefined - Number of installments for installment credit transaction. - Required
     *          array['soft_descriptor'](string) - <= 22 character - Text displayed on buyer card statement, This field is optional and, if you don't enter anything, it will be considered the fancy name registered for the property. This field allows only alphanumeric data and the following special characters:% $,. / & () + = = <> - * Spaces will be replaced by the character '*' The transaction will not be denied if non-allowed characters are sent. Any information that exceeds the maximum size will be disregarded. - Required
     *          array['dynamic_mcc'](number) - undefined - Field used to signal the transaction with another Merchant Category Code other than the registered one. If an invalid MCC is sent, the default will be used. Send numeric data only. - Required
     *          array['card'](array) - Customer's credit card Data set - Required
     *                  array['number_token'](string) - 128 characters - Credit card number tokenized. - Required
     *                  array['cardholder_name'](string) - <= 26 characters - Customer name on credit card. - Required
     *                  array['security_code'](string) - [3..4] characters - Security code. CVV ou CVC. - Required
     *                  array['brand'](string) - <= 50 characters - Credit card brand - Required
     *                  array['expiration_month'](string) - 2 characters - Two-digit card expiration month. - Required
     *                  array['expiration_year'](string) - 2 characters - Two-digit card expiration year. - Required
     *
     * @param array $requestParameters (See above)
     * @return array|false
     */
    public function authorize($requestParameters = []);

    /**
     * @param array $requestParameters
     * @return mixed
     */
    public function debitAuthorize($requestParameters = []);

    /**
     * Endpoint for capture payments pre authorized.
     * When a credit transaction is made with the delayed = true or pre_authorization = true,
     * late confirmation or pre authorization option, respectively, it can be later confirmed,
     * this endpoint is responsible for the confirmation.
     *
     * @return array
     */
    public function capture($requestParameters);

    /**
     * Endpoint responsible for void credit card transactions.
     * Cancel a full credit transaction or late credit transaction or pre-authorization transaction.
     * - Reverses or undoes same day transactions (D0).
     *
     * array['card_number'](String) - [13..19] characters - Credit card number - Required
     * array['customer_id'](string) - <= 100 characters - Customer's identifier - Optional
     *
     * @param array $requestParameters (See above)
     * @return array
     */
    public function void($requestParameters = []);
}
